plugins {
  id 'com.android.library'
  id 'jacoco'
}

jacoco {
  toolVersion = rootProject.ext.jacocoVersion ?: '0.8.10'
}

def localPropsFile = rootProject.file('local.properties')
def localProps = new Properties()
if (localPropsFile.exists()) {
  localPropsFile.withInputStream(localProps.&load)
}

def hasKeystoreConfig = localProps.containsKey('store.file') &&
  localProps.containsKey('store.password') &&
  localProps.containsKey('key.password')

def stringPropertyOrDefault = { String key, String fallback, boolean warn = true ->
  if (localProps.containsKey(key)) {
    return "\"${localProps.getProperty(key)}\""
  }
  if (warn) {
    logger.lifecycle("${key} variable is not set in your local.properties")
  }
  return "\"${fallback}\""
}

android {
  namespace 'org.smartregister.anc.library'
  compileSdk 35
  buildToolsVersion '35.0.0'

  useLibrary 'org.apache.http.legacy'

  signingConfigs {
    if (hasKeystoreConfig) {
      release {
        storeFile file(localProps['store.file'])
        storePassword localProps['store.password']
        keyAlias 'release'
        keyPassword localProps['key.password']
      }
    }
  }

  defaultConfig {
    minSdk 28
    targetSdk 35
    versionCode Integer.parseInt(project.VERSION_CODE)
    versionName project.VERSION_NAME
    multiDexEnabled true
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    if (hasKeystoreConfig) {
      signingConfig signingConfigs.release
    }

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = [eventBusIndex: 'org.smartregister.anc.library.ANCEventBusIndex']
      }
    }

    buildConfigField 'int', 'VERSION_CODE', project.VERSION_CODE
    buildConfigField 'String', 'VERSION_NAME', "\"${project.VERSION_NAME}\""

    buildConfigField 'String', 'FLURRY_API_KEY', stringPropertyOrDefault('flurry.api.key', 'sample_key', false)
    buildConfigField 'String', 'OAUTH_CLIENT_ID', stringPropertyOrDefault('oauth.client.id', 'sample_client_id')
    buildConfigField 'String', 'OAUTH_CLIENT_SECRET', stringPropertyOrDefault('oauth.client.secret', 'sample_client_secret')
    buildConfigField 'String[]', 'LOCATION_LEVELS', '{"Country", "Province", "District", "Facility", "Village"}'
    buildConfigField 'String[]', 'HEALTH_FACILITY_LEVELS', '{"Country", "Province", "District", "Health Facility", "Village"}'
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      enableUnitTestCoverage true
      enableAndroidTestCoverage true
      if (hasKeystoreConfig) {
        signingConfig signingConfigs.release
      }
    }
  }

  lint {
    checkReleaseBuilds false
    abortOnError false
  }

  packaging {
    resources {
      excludes += [
        'META-INF/*',
        'LICENSE.txt',
        'META-INF/LICENSE',
        'META-INF/LICENSE.txt',
        'META-INF/NOTICE',
        'META-INF/NOTICE.txt',
        'META-INF/ASL2.0',
        'META-INF/INDEX.LIST'
      ]
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    buildConfig true
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true
      all {
        jvmArgs '-Xmx2048m'
        jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.text=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.security=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
        jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
        systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        systemProperty 'robolectric.enabledSdks', '28'
      }
    }
  }
}

tasks.withType(Test).configureEach {
  jacoco {
    includeNoLocationClasses = true
    excludes = ['jdk.internal.*']
  }
}

configurations.configureEach {
  exclude group: 'net.zetetic', module: 'sqlcipher-android'
}

dependencies {
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.core:core:1.13.1'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'com.google.android.material:material:1.12.0'

  implementation('io.github.bluecodesystems:opensrp-client-core:6.2.2') {
    transitive = true
  }
  implementation('io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3') {
    transitive = true
  }
  implementation('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1') {
    transitive = true
  }
  api('io.github.bluecodesystems:android-p2p-sync:0.4.3') {
    transitive = true
  }
  api 'io.github.bluecodesystems:opensrp-client-utils:0.0.6'
  api 'io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0'

  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'commons-validator:commons-validator:1.7'
  implementation 'com.google.code.gson:gson:2.9.1'
  implementation 'org.greenrobot:eventbus:3.3.1'
  annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.3.1'
  annotationProcessor 'com.jakewharton:butterknife:10.2.3'
  implementation 'com.jakewharton:butterknife:10.2.3'
  implementation 'com.google.guava:guava:32.1.2-android'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
  implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
  implementation 'com.evernote:android-job:1.4.2'
  implementation 'com.github.lecho:hellocharts-library:1.5.8@aar'
  implementation 'id.zelory:compressor:2.1.1'
  implementation 'androidx.multidex:multidex:2.0.1'
  implementation 'androidx.sqlite:sqlite:2.4.0'
  implementation 'androidx.sqlite:sqlite-framework:2.4.0'
  implementation 'net.zetetic:android-database-sqlcipher:4.5.4@aar'
  implementation 'org.yaml:snakeyaml:1.33'
  implementation 'de.hdodenhof:circleimageview:3.1.0'
  implementation 'io.github.bluecodesystems:materialedittext:3.1.5'
  implementation 'org.jeasy:easy-rules-core:3.3.0'
  implementation 'org.jeasy:easy-rules-mvel:3.3.0'
  implementation 'org.jeasy:easy-rules-support:3.3.0'
  implementation 'com.itextpdf:itext7-core:7.2.5'
  implementation 'com.android.volley:volley:1.2.1'
  implementation 'com.google.android.gms:play-services-vision:20.1.3'
  implementation 'com.jakewharton.timber:timber:5.0.1'

  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.hamcrest:hamcrest:2.2'
  testImplementation 'org.mockito:mockito-core:5.2.0'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation 'org.robolectric:robolectric:4.10.3'
  testImplementation 'org.robolectric:shadows-multidex:4.10.3'
  testImplementation 'androidx.test:core:1.5.0'
  testImplementation 'androidx.sqlite:sqlite:2.3.1'
  testImplementation 'net.zetetic:android-database-sqlcipher:4.5.4@aar'
  testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
  testImplementation 'org.skyscreamer:jsonassert:1.5.1'
  testImplementation 'com.ibm.fhir:fhir-model:4.8.3'

  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test:runner:1.5.2'
  androidTestImplementation 'androidx.test:rules:1.5.0'
  androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1') {
    exclude group: 'com.google.code.findbugs'
  }
}

tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports {
    xml.required = true
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
    html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
  }
  def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*','**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$projectDir/src/main/java"
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  executionData.setFrom(fileTree(dir: buildDir, includes: [
    'jacoco/testDebugUnitTest.exec',
    'outputs/code-coverage/connected/*coverage.ec'
  ]))
}

apply from: '../maven.gradle'
